syntax = "proto3";

package stan.proto

/** 
 * Union-type message for holding other messages and simplifying packing
 * messages for serialization.  This design follows the 'union types' 
 * techniques suggestion from:
 * https://developers.google.com/protocol-buffers/docs/techniques
 */
message StanMessage {
  enum Type {
    UNKNOWN = 0;   // Default value in case of bad set value.
    EMPTY = 1;     // Indicates there is no message.
    COMPILE_REQUEST = 2;   // Indicates this is a request to compile
                           // a Stan program to C++
    COMPILE_RESPONSE = 3;  // Indicates this message is a compilation
                           // request response.
  }
  Type type = 1;  // Type of actual message held.
  StanVersion stan_version = 2; 
  StanCompileRequest stan_compile_request = 3;   
  StanCompileResponse stan_compile_response = 4;
}

/** 
  * Version of the Stan components.  Used to indicate which version
  * produced/processed a message.
  */
message StanVersion {
  string version = 1;          // Version string.
  string stan_math_hash = 2;   // git hash from math library
  string stan_stan_hash = 3;   // git hash from language library
}



